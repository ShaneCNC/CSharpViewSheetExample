<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Bookmarks" xml:space="preserve">
    <value>Working with bookmarks</value>
  </data>
  <data name="ChangedViewSheetSettings" xml:space="preserve">
    <value>Changed 'SaveTo ViewSheets' settings.</value>
  </data>
  <data name="ChangeViewSheetSettings" xml:space="preserve">
    <value>Display the system's dialog and have you change some settings.</value>
  </data>
  <data name="ChangingViewSheetSettings" xml:space="preserve">
    <value>Change some settings via this NET-Hook. ALL OFF, except for WCS, Color and ZDepth.</value>
  </data>
  <data name="CreateViewSheets" xml:space="preserve">
    <value>Creating 3 view sheets, first is a system assigned view sheet name, the second is our custom view sheet name.</value>
  </data>
  <data name="CycleActiveSheetMessage" xml:space="preserve">
    <value>Now we'll cycle through all of the view sheets making each the active view sheet.</value>
  </data>
  <data name="DemoCompleted" xml:space="preserve">
    <value>View sheet demo is complete</value>
  </data>
  <data name="DemoFailed" xml:space="preserve">
    <value>View sheet demo ended with failure(s).</value>
  </data>
  <data name="DisplayViewSheetData" xml:space="preserve">
    <value>Displaying view sheet data</value>
  </data>
  <data name="FailedCreateViewSheet" xml:space="preserve">
    <value>Failed to create a new view sheet</value>
  </data>
  <data name="FailedToCreateViewSheetBookmark" xml:space="preserve">
    <value>Failed to create a bookmark </value>
  </data>
  <data name="FailedToDeleteBookmark" xml:space="preserve">
    <value>Failed to delete view sheet bookmark</value>
  </data>
  <data name="FailedToDeleteViewSheet" xml:space="preserve">
    <value>Failed to delete view sheet</value>
  </data>
  <data name="FailedToFindActiveViewSheet" xml:space="preserve">
    <value>Failed to find the active view sheet</value>
  </data>
  <data name="FailedToFindNameOfActiveViewSheet" xml:space="preserve">
    <value>Failed to find the name of the active view sheet</value>
  </data>
  <data name="FailedToGetSaveToViewSheetSettings" xml:space="preserve">
    <value>Failed to retrieve view sheets settings.</value>
  </data>
  <data name="FailedToSetActiveViewSheet" xml:space="preserve">
    <value>Failed to set the name of the active view sheet</value>
  </data>
  <data name="FailedToSetActiveViewSheetAtIndexZero" xml:space="preserve">
    <value>Failed to set view sheet at index zero as the active view sheet</value>
  </data>
  <data name="SaveToViewSheetsSettings" xml:space="preserve">
    <value>Display the 'SaveTo ViewSheets' settings.</value>
  </data>
  <data name="SetActiveViewSheetAtIndexZero" xml:space="preserve">
    <value>Setting view sheet at index zero as the active view sheet</value>
  </data>
  <data name="SetOurCustomSheetAsTheActiveViewSheet" xml:space="preserve">
    <value>Setting our custom view sheet as the active view sheet</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>View Sheets Demo</value>
  </data>
  <data name="ViewSheetCreated" xml:space="preserve">
    <value>View sheet created successfully</value>
  </data>
  <data name="ViewSheetNameInValid" xml:space="preserve">
    <value>View sheet name is invalid (it might already exist)</value>
  </data>
  <data name="AddingBookmark" xml:space="preserve">
    <value>Adding a bookmark to</value>
  </data>
  <data name="CouldNotFindSheet" xml:space="preserve">
    <value>Could not find the main sheet.</value>
  </data>
  <data name="EnableViewSheets" xml:space="preserve">
    <value>View sheets are not enabled, so we will enable them."</value>
  </data>
  <data name="FailedToChangeSettings" xml:space="preserve">
    <value>Failed to change settings.</value>
  </data>
  <data name="FailedToGetSheetData" xml:space="preserve">
    <value>Failed to get sheet data.</value>
  </data>
  <data name="FailedToSaveBookmark" xml:space="preserve">
    <value>Failed to save bookmark.</value>
  </data>
  <data name="NowWeWillChangeSettings" xml:space="preserve">
    <value>Now we'll change some settings via this NET-Hook.</value>
  </data>
  <data name="ShowChangedSettings" xml:space="preserve">
    <value>Here are the changed 'SaveTo ViewSheets' settings.</value>
  </data>
  <data name="ShowSaveToSettings" xml:space="preserve">
    <value>Now we'll display the 'SaveTo ViewSheets' settings.</value>
  </data>
  <data name="ShowSettingsDialog" xml:space="preserve">
    <value>Now we'll display the system's dialog and have you change some settings</value>
  </data>
</root>